>> SA - LCP
	* 자기 내부 문자열 탐색 O(nlog^2n) : 같은 문자의 다중 등장 등
	* 접미사, 접두사의 반복과 관련된 문제


>> SA(Suffix Array) 
	: 특정 문자열에서 등장하는 접미사를 사전순으로 정렬한 것

	[mississipi]
	- Suffix
		mississipi			0
		ississipi			1
		ssissipi			2			
		sissipi 			3
		issipi 				4
		ssipi 				5
		sipi 				6
		ipi 				7
		pi 					8
		i 					9

	- Suffix Value		Suffix Array
		i 					9
		ipi 				7
		issipi 				4
		ississipi 			1
		mississipi 			0
		pi 					8
		sipi 				6
		sissipi 			3
		ssipi 				5
		ssissipi 			2

		* 실제 value를 다 저장할 공간이 없으니, 대부분 위치로만 저장

	[구현]
		>> O(Nlog^2N) : 맨버-마이어스 알고리즘

			[핵심개념]
				- 각 접미사를 그룹으로 나누어가며 각 자리의 문자만 비교하여 그룹을 정렬한다
				- 그룹 비교를 2의 제곱수로 늘려나가며 한다
					* 이미 해당 접두사만큼 비교되어 있기 때문
				- 각 자리만 비교하기 때문에 접미사 전체를 따로 저장하여 정렬하는 것보다  O(N^2logN) 빠르고 메모리도 적게 먹는다.

			[Tip]
				- group[n] = -1로 두면 범위 상관없이 정렬 
				- group에서 현재 문자가 같다면 +t 한 문자 비교
				- 최초 세팅 후 SA 정렬, group 재지정
				- t > n 면 while 문 끝
				- comp를 함수 객체로 만들어 사용해야 함
				- 함수객체 생성자에 주의!

			[로직]
				1) 각 접미사의 그룹 지정 (n+1개, group[n] = -1)
				2) suffixArray 초기화 (n개, 0 ~ n-1)
				3) group으로 정렬하는 Compare 객체 선언(const 참조변수)
					- operator () overriding : 현재 그룹이 다르면 그룹 대소 비교, 그룹이 같으면 다음 그룹 비교(각 글자를 의미한다고 보면 됨)
				4) 반복문 구현 (tmp < n)
					- comp 객체 생성
					- 해당 객체로 정렬
					- 다음 그룹의 가장 작은 그룹번호를 0으로 지정
					- 다음 group 계산 및 지정 (comp에 의한 그룹 비교 후 그룹 대소 관계에 따라 +1)
					- tmp *= 2


	[응용]
		>> 문자열 검색
		>> 두 문자열의 중복 문자열 비교
			- 두 문자열을 합쳐 가장 긴 LCP를 반환
				* 단, 두 문자열을 더할때 사이에 두 문자열 모두에 등장하지 않는 eof필요
				* eof는 사전순으로 앞서야 함
				* lcp 중 조건을 만족하는 애들을 찾아야 함



>> LCP(Longest Common Prefix)
	: 두 문자열의 공통 접두사의 길이를 의미
		* 보통 SA에서 이전 값과의 LCP를 구하여 응용함

	- Suffix Array 		LCP
		i 					-
		ipi 				1
		issipi 				1
		ississipi 			4
		mississipi 			0
		pi 					0
		sipi 				0
		sissipi 			2
		ssipi 				1
		ssissipi 			3


	[구현]
		>> O(N) : SA의 속성 활용

		[핵심개념]
			- 사전순으로 정렬되어 있기 때문에 이웃할 때 겹치는 부분이 많고 이웃하지 않을 때엔 이웃할 때보다 무조건 작거나 같다.
			
			- banana 에서
				anana 와 ana의 공통 부분이 3이라면, 양쪽 모두에서 앞에 글자 하나를 뺀
				nana 와 na의 공통부분은 2이다.

