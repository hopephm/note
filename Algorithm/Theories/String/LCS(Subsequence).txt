>> LCS (Longest Common Subsequnece)
	: 두 수열의 모두의 부분 수열이 되는 것 중 가장 긴 것을 찾음

	<원리>
		>> 2차원 배열 활용
		>> 현재 비교하려는 값이 불일치 : 이전 행, 혹은 열에서 큰 값을 그대로 받음
			* 현재까지의 LCS는 현재 값에서 새로 계산된 LCS의 값이나 이전 행에서 계산한 LCS 중 큰 것을 사용하면 되기 때문 (현재 값이 불일치 하므로)

		>> 현재 비교하려는 값이 일치 : 이전행-1의 값에 1을 더함 
			* 현재 비교하려는 값을 비교하기 전까지의 LCS로서의 의미

		>> LCS는 각 열에서 가장 먼저 나타나는 값을 순차적으로 선택함으로써 알 수 있음
			* 먼저 나타남 : 현재 값이 일치함을 의미
			* 각 열 : 각 일치하는 문자가 달라야 함을 의미

	<예시>
		>> 문자열 , ACAYKP 와 CAPCAK

		>> 배열 (최초 세팅)
			0	A 	C 	A 	Y 	K 	P
		 0 	0	0  	0  	0  	0  	0  	0

		 (C 비교 : 배열에는 현재까지 비교하였을 때 공통되는 문자 개수를 저장한다.)
		 	0	A 	C 	A 	Y 	K 	P
		 0 	0  *0  	0  	0  	0  	0  	0
		 C 	0	0 **1	1	1	1	1

		 	** 현재 C가 일치하므로 이전까지 비교하였을 때 LCS인 *의 값 0에 1을 더한다.

		 (A 비교)
		 	0	A 	C 	A 	Y 	K 	P
		 0 	0	0  	0  	0  	0  	0  	0
		 C 	0	0  *1	1	1	1	1
		 A 	0	1	1 **2	2	2	2

		 	** 현재 A가 일치하므로 이전까지 비교하였을 때 LCS인 *의 값 1에 1을 더한다.

		 (최종)
		 	0	A 	C 	A 	Y 	K 	P
		 0 	0	0  	0  	0  	0  	0  	0
		 C 	0	0	1	1	1	1	1
		 A 	0  (1)	1	2	2	2	2
		 P	0	1	1	2	2	2	3
		 C 	0	1  (2)	2	2	2	3
		 A 	0	1	2  (3)	3	3	3
		 K 	0	1	2	3	3  (4)	4

		 * LCS : ACAK 임을 알 수 있다.

