>> KMP(Knuth-Morris-Pratt) 알고리즘
	: 문자열 검색 알고리즘

	* 특정문자열 내에서 다른 문자열 탐색 : O(N+M)
	* 접미사, 접두사의 재귀적 등장 

	[예시]

	전체 문자열 : C B A B C A B C D A B C D A B C
	찾으려는 문자열 : A B C D A B C


		[PI 배열]
		A 				0
		A B 			0
		A B C			0
		A B C D			0
		A B C D A		1
		A B C D A B 	2
		A B C D A B C 	3


		[KMP 과정]

		1)	C B A B C A B C D A B C D A B C
			|x
			A B C D A B C
			* 일치하는 개수가 없으니 바로 다음 문자로

		2) 	C B A B C A B C D A B C D A B C
			  |x
			  A B C D A B C
			 * 일치하는 개수가 없으니 바로 다음 문자로

		3) 	C B A B C A B C D A B C D A B C
			    | | | |x
			    A B C D A B C
			 * 3개 일치 : PI[3] = 0 이므로 3칸 건너 뜀

		4) 	C B A B C A B C D A B C D A B C
			           | | | | | | |
			           A B C D A B C
			 * 찾음!, 7개 일치 : PI[7] = 3 이므로 7-3 건너 뜀

		5)   C B A B C A B C D A B C D A B C
			                     | | | | | | |
			                     A B C D A B C
			 * 찾음!, 종료



	[핵심개념]
	 	- 일치하는 문자열 내에서 접미사도 되고 접두사도 되는만큼을 제외하고 건너뛰어 다음 문자열 검색 (해당 검사한 내부에서 등장할 가능성이 있는가? 의 의미)
	 		* 해당 문자열 내에서 전부 일치하지 않을 것으로 예상되는 문자열은 검색을 건너 뜀

	 	- pi 배열 : 검색하려는 문자열의 접두사도 되고 접미사도 되는 문자 개수

	[구현]
		>> 시간 복잡도 : O(n+m: 전체 문자열 + 검색하려는 문자열)
			* 전체 문자열 순회 : n
			* 검색하려는 문자열 pi배열 생성 : m
				>> n >= m 이므로 보통 O(n)으로 표기

		[pi배열 계산]
			* pi배열 계산에 KMP 알고리즘을 적용
			* 각 과정에서 일치하는 만큼 다음 위치에서 검색

			1)	<pi배열>	   0 0
						   A B A B A C A B
							 |x
						     A B A B A C A B
				* 일치 X : 다음 위치로

			2)	<pi배열>	   0 0 1 2 3
						   A B A B A C A B
							   | | | |x 
						       A B A B A C A B

				* 이때 Pi[3] = 1 이므로 3-1 = 2 이므로 +2 위치로

			3)	<pi배열>	   0 0 1 2 3  
						   A B A B A C A B
							        | |x
						            A B A B A C A B
				* max(3,1) = 3 이므로 갱신하지 않고 pi[1] = 0 이므로 1 - 0 = 1 이므로 +1 위치로
				* 사실 뒤로 갈수록 작은 matching이 생기므로 이미 갱신되어 있다면 생략해도 됨

			4)	<pi배열>	   0 0 1 2 3 0 
						   A B A B A C A B
							          |x
						              A B A B A C A B
				* 일치 X : 다음 위치로

			5)	<pi배열>	   0 0 1 2 3 0 1 2
						   A B A B A C A B
							            | |
						                A B A B A C A B
				* 일치 기록, 종료

	