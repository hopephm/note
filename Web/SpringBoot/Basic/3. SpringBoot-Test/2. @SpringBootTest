	< @SpringBootTest >

		- 통합 테스트를 제공하는 기본 테스트 어노테이션
		- 실제 구동 app과 같이 컨텍스트를 로드하여 테스트
			* 단위 테스트의 의미 희석

		[사용]

			@SpringBootTest(
				( value="value=test" | 							# 동시사용 불가
				  properties= {"property.value=propertyTest"} ),
				classes = { SpringBootTestApplication.class},
				webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
			)


			- value			: 테스트 실행 전 프로퍼티 주입 (오버라이드)
			- properties	: 테스트 실행 전 프로퍼티 추가
			- classes		: application context에 로드할 클래스 지정
							  (default=@SpringBootConfiguration 탐색 후 로드)
			- webEnvironment: app실행 시 웹 환경 설정 
							  (default=Mock서블릿 로드 구동)


			※ @RunWith
				: 기존 SpringBootApplication 사용을 위해 RunWith 어노테이션을 통해 SpringRunner 클래스로 테스트를 수행해 주어야 했지만, 
				Spring 버전이 2.1대로 넘어가며, @RunWith가 @ExtentWith로 대체 됨.
				해당 어노테이션이 SpringBootTest에 이미 사용되어 그냥 @SpringBootTest만으로 테스트가 가능해짐

				* 출처: https://www.whiteship.me/springboot-no-more-runwith/


		---------------------------------------
			>> @AutoConfigureMockMvc 어노테이션을 붙여 통합 컨트롤러 테스트 가능
			>> webApplicationContext를 설정해주어야 403 Forbidden 에러가 뜨지 않음


		@SpringBootTest
		@AutoConfigureMockMvc
		public class RealControllerTest(){

			@Autowired
		    private WebApplicationContext webApplicationContext;

		    private static MockMvc mvc;

		    @BeforeEach
		    public void setup(){
		        mvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
		    }

		    @Test
		    public void someTest(){
		    	...
		    	...
		    }

	    }