
[스프링 부트 1.5 기준]

OAuth2 인증 프로세스 적용을 위한 Security 설정 추가

	*** 예시 *** 

	@Configuration
	@EnableWebSecurity
	@EnableOAuth2Client
	public class SecurityConfig extends WebSecurityConfigurerAdapter {

	    @Autowired
	    private OAuth2ClientContext oAuth2ClientContext;

	    @Override
	    protected void configure(HttpSecurity http) throws Exception {
	        CharacterEncodingFilter filter = new CharacterEncodingFilter();

	        http
	            .authorizeRequests()
            .and()
                .addFilterBefore(filter, CsrfFilter.class)
                .addFilterBefore(oauth2Filter(), BasicAuthenticationFilter.class)
                .csrf().disable();
        }

		@Bean
	    public FilterRegistrationBean oauth2ClientFilterRegistration(OAuth2ClientContextFilter filter) {
	        FilterRegistrationBean registration = new FilterRegistrationBean();
	        registration.setFilter(filter);
	        registration.setOrder(-100);
	        return registration;
	    }

	    private Filter oauth2Filter() {
	        CompositeFilter filter = new CompositeFilter();
	        List<Filter> filters = new ArrayList<>();
	        filters.add(oauth2Filter(facebook(), "/login/facebook", FACEBOOK));
	        filters.add(oauth2Filter(google(), "/login/google", GOOGLE));
	        filters.add(oauth2Filter(kakao(), "/login/kakao", KAKAO));
	        filter.setFilters(filters);
	        return filter;
	    }

	    private Filter oauth2Filter(ClientResources client, String path, SocialType socialType) {
	        OAuth2ClientAuthenticationProcessingFilter filter = new OAuth2ClientAuthenticationProcessingFilter(path);

	        OAuth2RestTemplate template = new OAuth2RestTemplate(client.getClient(), oAuth2ClientContext);

	        filter.setRestTemplate(template);
	        filter.setTokenServices(new UserTokenService(client, socialType));

	        filter.setAuthenticationSuccessHandler((request, response, authentication) -> response.sendRedirect("/" + socialType.getValue() + "/complete"));

	        filter.setAuthenticationFailureHandler((request, response, exception) -> response.sendRedirect("/error"));

	        return filter;
	    }
    }


    ※ oauth2ClientFilterRegistration	: FilterRegistrationBean을 생성 후 등록하여 필터가 동작하도록 한다. 
    	- setOrder(-100): 스프링 시큐리티 필터가 실행되기 전에 등록

    ※ oauth2Filter()	: 각 소셜타입 별 필터 등록

    ※ oauth2Filter(client, path, socialType) : 인증 필터 설정
    	- OAuth2ClientAuthenticationProcessingFilter filter = new OAuth2ClientAuthenticationProcessingFilter(path)
    		: 인증이 수행될 경로를 넣어 처리필터 생성

    	- OAuth2RestTemplate template = new OAuth2RestTemplate(client.getClient(), oAuth2ClientContext);
    		: 프로퍼티를 통해 주입받은 클라이언트 정보와 자동설정을 통한 OAuth2ClientContext로 권한서버 통신을 위한 템플릿 생성

    	- 인증 필터 셋팅
    		> filter.setTokenServices(new UserTokenService(client, socialType))
    		: *** client와 socialType에 맞는 권한 토큰을 위한 서비스 ***

    		> filter.setAuthenticationSuccessHandler((request, response, authentication) -> response.sendRedirect("/" + socialType.getValue() + "/complete"))
    		: 인증 성공시 리다이렉트 경로
    		> filter.setAuthenticationFailureHandler((request, response, exception) -> response.sendRedirect("/error"))
    		: 인증 실패시 리다이렉트 경로



    *** UserTokenService *** 

    public class UserTokenService extends UserInfoTokenServices {

	    public UserTokenService(ClientResources resources, SocialType socialType) {
	        super(resources.getResource().getUserInfoUri(), resources.getClient().getClientId());

	        setAuthoritiesExtractor(new OAuth2AuthoritiesExtractor(socialType));
	    }

	    public static class OAuth2AuthoritiesExtractor implements AuthoritiesExtractor {

	        private String socialType;

	        public OAuth2AuthoritiesExtractor(SocialType socialType) {
	            this.socialType = socialType.getRoleType();
	        }

	        @Override
	        public List<GrantedAuthority> extractAuthorities(Map<String, Object> map) {
	            return AuthorityUtils.createAuthorityList(this.socialType);
	        }
	    }

	}

		- UserInfoTokenServices : 스프링 시큐리티 OAuth2에서 제공, 소셜 서버와 통신하는 역할
			> 생성자로, URI와 ClientId가 필요
			> 어떤 권한을 생성할 것인지에 대한 정의를 AuthoritiesExtractor에 설정 가능

		- AuthoritiesExtractor : 권한생성 방식에 대한 정의
			> SocialType enum 객체의 ROLETYPE을 Authority로 하는 인증 생성
			> @Override
		        public List<GrantedAuthority> extractAuthorities(Map<String, Object> map) {
		            return AuthorityUtils.createAuthorityList(this.socialType);
		        }
		      : socialType이라는 이름의 권한을 부여

		    * 해당 권한을 security 설정에서 hasAuthority(권한이름)을 통해 인증 정보 사용가능

	*** 인증과 관련된 정보는 Principal 객체로 확인 가능 ***

	@RequestMapping("/auth")
    @ResponseBody
    public Principal user(Principal principal){
        return principal;
    }

    *** 해당 정보는 키값으로 제공 받을 수 있으므로 User 객체에 저장가능