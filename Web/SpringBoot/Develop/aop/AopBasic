 AOP : Aspect Oriented Programming (관점 지향 프로그래밍)
    >> 특정 기능 전,후에 동일한 기능을 따로 떼어 적용하는 기법

    [요소]
        - Advice    : AOP할 기능
        - Target    : Advice를 적용받을 대상
        - JoinPoint : Advice 적용가능 메서드 혹은 위치
        - PointCut  : Advice 주입 대상 선정 방법


    [Aspect Annotation]
        <Aspect Class 선언>
        @Aspect     : Aspect 선언
        @Component  : Aspect만으로 Bean등록이 되지 않으므로 Bean 등록

        <joinpoint 지정>          * 해당 어노테이션에서 pointcut까지 지정 가능
        @Before     : target 실행 전 Advice 실행
        @After      : target 실행 후 Advice 실행
        @Around     : target을 포함, 전후 실행 및 반환까지 제어
        @AfterReturning : target이  정상적으로 끝난경우만 Advice 실행
        @AfterThrowing  : target에서 throwing이 발생되었을 때 실행
            
        <pointcut 지정자>          * 위 joinpoint annotation 내부에 선언
        @annotation()   : 특정 annotation이 사용된 모든 메서드
            * @annotation(com.web.annotation.Custom)
              : Custom이라는 어노테이션을 사용하는 모든 메서드
        @target()       : 특정 annotation이 사용된 객체의 모든 메서드
            * @target(com.web.annotation.Custom)
              : 어떤 객체 내부에 Custom 어노테이션이 있다면 해당 오브젝트의 모든 메서드에 적용
        @args()         : 인수의 개수가 일치하며, 해당 인수 타입을 가지는 모든 메서드 대상
            * @args(com.web.domain.Custom)
              : Custom이라는 하나의 매개변수를 갖는 모든 메서드

        execution()     : 메서드 명세에 대해 세부 조정
            * execution(접근자 패키지 및 클래스 매개변수) 를 조합하여 상세 설정

              [예제]
              execution(public * *(..))    : 모든 public 메소드
              execution(* com.web.*.*(..)) : com.web 패키지의 모든 메소드
              execution(* com.web..*.*(..)): com.web 패키지 및 하위 패키지의 모든 메소드
              execution(* void insert*())  : 패키지가 없고 insert로 시작하는 매개변수가 없는 모든 메소드
              execution(private get*(*,*,*)) : get으로 시작하는 매개변수가 3개인 private 메소드
              execution(* * *(Integer,..)) : 첫번째 매개변수가 Integer인 1개이상의 매개변수를 갖는 메소드

        within()        : execution에서 클래스,인터페이스 대상 적용
            * within(com.web.domain.Custom)
              : Custom 클래스 대상
        bean()          : bean의 메서드
            * bean(example*)
              : 이름이 example로 시작되는 bean의 메서드


        <별개- annotation 선언>
        @Target(ElementType.~)          : annotation이 적용가능한 대상선언
            * PACKAGE, METHOD, FIELD, PARAMETER 등 다양.. 
        @Retestion(RetentionPolicy.~)   : annotation 주기선언
            * RUNTIME, CLASS, SOURCE 세가지.




    [AOP 예제 - 아래 Example 폴더에서 확인해 보자]

    ※ 해당 예제는 Bean으로 등록된 객체에만 적용됨
            *** 이거 찾느라 세상 오래 걸렸는데, Bean등록 안된 객체에 하는 방법도 있겠지? 그건 필요할 때 찾아보자... ***